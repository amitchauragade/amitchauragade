#include <stdio.h>
#include <stdlib.h>

// Node structure
struct node {
    int key;
    struct node *left;
    struct node *right;
    int height;
};

// Function to get the height of the node
int getheight(struct node *n) {
    if (n == NULL)
        return 0;
    return n->height;
}

// Function to create a new node
struct node* createnode(int key) {
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->key = key;  // Corrected this line
    node->left = NULL;
    node->right = NULL;
    node->height = 1;  // New node is initially added at leaf
    return node;
}

// Function to get the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to get the balance factor of the node
int getbalancefactor(struct node *n) {
    if (n == NULL) {
        return 0;
    }
    return getheight(n->left) - getheight(n->right);
}

// Right rotate function
struct node* rightrotate(struct node *y) {
    struct node* x = y->left;
    struct node* t2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = t2;

    // Update heights
    y->height = max(getheight(y->left), getheight(y->right)) + 1;
    x->height = max(getheight(x->left), getheight(x->right)) + 1;

    // Return new root
    return x;
}

// Left rotate function
struct node* leftrotate(struct node *y) {
    struct node* x = y->right;
    struct node* t2 = x->left;

    // Perform rotation
    x->left = y;
    y->right = t2;

    // Update heights
    y->height = max(getheight(y->left), getheight(y->right)) + 1;
    x->height = max(getheight(x->left), getheight(x->right)) + 1;

    // Return new root
    return x;
}

// Function to insert a node into the AVL tree
struct node* insert(struct node* node, int key) {
    // 1. Perform the normal BST insertion
    if (node == NULL)
        return createnode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Equal keys are not allowed in AVL tree
        return node;

    // 2. Update height of this ancestor node
    node->height = 1 + max(getheight(node->left), getheight(node->right));

    // 3. Get the balance factor of this ancestor node to check whether this node became unbalanced
    int bf = getbalancefactor(node);

    // If this node becomes unbalanced, then there are 4 cases

    // Left Left Case
    if (bf > 1 && key < node->left->key)
        return rightrotate(node);

    // Right Right Case
    if (bf < -1 && key > node->right->key)
        return leftrotate(node);

    // Left Right Case
    if (bf > 1 && key > node->left->key) {
        node->left = leftrotate(node->left);
        return rightrotate(node);
    }

    // Right Left Case
    if (bf < -1 && key < node->right->key) {
        node->right = rightrotate(node->right);
        return leftrotate(node);
    }

    // Return the (unchanged) node pointer
    return node;
}

int main() {
    struct node *root = NULL;

    root = insert(root, 45);
    root = insert(root, 40);
    root = insert(root, 63);
    root = insert(root, 21);
    root = insert(root, 67);
    root = insert(root, 31);
    root = insert(root, 97);
    root = insert(root, 78);
    root = insert(root, 456);
    root = insert(root, 466);
    root = insert(root, 72);

    return 0;
}
